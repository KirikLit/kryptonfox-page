/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    Head_1: THREE.Mesh;
    Hat_Layer: THREE.Mesh;
    Body_1: THREE.Mesh;
    Body_Layer: THREE.Mesh;
    Right_Arm: THREE.Mesh;
    Right_Arm_Layer: THREE.Mesh;
    Left_Arm: THREE.Mesh;
    Left_Arm_Layer: THREE.Mesh;
    Right_Leg: THREE.Mesh;
    Right_Leg_Layer: THREE.Mesh;
    Left_Leg: THREE.Mesh;
    Left_Leg_Layer: THREE.Mesh;
  };
  materials: {};
};

export default function Skin(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/skin.gltf') as GLTFResult;
  const meshRef = useRef(null);
  useFrame(() => (meshRef.current.rotation.y += 0.01));
  return (
    <group ref={meshRef} {...props} dispose={null}>
      <group position={[0, 1.5, 0]} rotation={[0.1051, -0.0868, 0.0091]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Head_1.geometry}
          material={nodes.Head_1.material}
          position={[0, -1.5, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Hat_Layer.geometry}
          material={nodes.Hat_Layer.material}
          position={[0, -1.5, 0]}
        />
      </group>
      <group position={[0, 1.5, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Body_1.geometry}
          material={nodes.Body_1.material}
          position={[0, -1.5, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Body_Layer.geometry}
          material={nodes.Body_Layer.material}
          position={[0, -1.5, 0]}
        />
      </group>
      <group position={[0.3125, 1.375, 0]} rotation={[0.1745, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Right_Arm.geometry}
          material={nodes.Right_Arm.material}
          position={[-0.3125, -1.375, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Right_Arm_Layer.geometry}
          material={nodes.Right_Arm_Layer.material}
          position={[-0.3125, -1.375, 0]}
        />
      </group>
      <group position={[-0.3125, 1.375, 0]} rotation={[-0.2094, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Left_Arm.geometry}
          material={nodes.Left_Arm.material}
          position={[0.3125, -1.375, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Left_Arm_Layer.geometry}
          material={nodes.Left_Arm_Layer.material}
          position={[0.3125, -1.375, 0]}
        />
      </group>
      <group position={[0.1187, 0.75, 0]} rotation={[-0.1919, -0.0067, 0.0343]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Right_Leg.geometry}
          material={nodes.Right_Leg.material}
          position={[-0.1187, -0.75, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Right_Leg_Layer.geometry}
          material={nodes.Right_Leg_Layer.material}
          position={[-0.1187, -0.75, 0]}
        />
      </group>
      <group
        position={[-0.1187, 0.75, 0]}
        rotation={[0.1744, -0.0061, -0.0344]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Left_Leg.geometry}
          material={nodes.Left_Leg.material}
          position={[0.1187, -0.75, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Left_Leg_Layer.geometry}
          material={nodes.Left_Leg_Layer.material}
          position={[0.1187, -0.75, 0]}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/skin.gltf');
